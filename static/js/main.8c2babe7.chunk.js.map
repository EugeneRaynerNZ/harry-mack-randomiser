{"version":3,"sources":["utils.js","components/Speed.js","components/Category.js","data.js","App.js","serviceWorker.js","index.js"],"names":["getVideoId","videoUrl","match","console","log","length","Speed","bpm","setBpm","className","onClick","e","Category","name","onCheck","checked","type","value","onChange","categories","getApiData","a","fetch","join","response","json","data","map","x","word","getWords","App","useState","setWord","words","setWords","isRunning","setIsRunning","checkedItems","setCheckedItems","setVideoUrl","videoPlayerEl","setVideoPlayerEl","useEffect","interval","calculateInterval","intervalRef","setInterval","updateWord","clearInterval","playVideo","pauseVideo","pickedWord","remainingWords","category","includes","filter","item","Container","Row","Col","sm","event","target","videoId","opts","playerVars","autoplay","onReady","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iXAIaA,G,YAAa,SAACC,GACzB,IACMC,EAAQD,EAASC,MADR,6EAIf,OAFAC,QAAQC,IAAI,UAAYF,MACDA,GAA6B,KAApBA,EAAM,GAAGG,SAAgBH,EAAM,KCLlD,SAASI,EAAT,GAA+B,IAAfC,EAAc,EAAdA,IAAKC,EAAS,EAATA,OAUhC,OACI,yBAAKC,UAAU,SACX,uBAAGA,UAAU,0BAAb,WAA+CF,EAAM,GAArD,qBACA,yBAAKE,UAAU,oBAEX,4BAAQA,UAAU,cAAcC,QAbxB,SAACC,GACjB,OAAOH,EAAOD,EAAM,KAYZ,KACA,2BAAIA,EAAJ,QACA,4BAAQE,UAAU,cAAcC,QAXxB,SAACC,GACjB,OAAOH,EAAOD,EAAM,KAUZ,OClBD,SAASK,EAAT,GAA6C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,QAC7C,OACI,4BAAI,+BAAO,2BAAOC,KAAK,WAAWC,MAAOJ,EAAMK,SAAUJ,EAASC,QAASA,IAAWF,ICHvF,IAAMM,EACJ,QADIA,EAEL,OAFKA,EAGH,SAHGA,EAIN,MAJMA,EAKJ,Q,SAGMC,E,8EAAf,WAA0BD,GAA1B,iBAAAE,EAAA,sEACyBC,MAAM,qCAAD,OACWH,EAAWI,KAAK,OAFzD,cACQC,EADR,gBAKqBA,EAASC,OAL9B,cAKQC,EALR,yBAOSA,EAAKC,KAAI,SAACC,GAAD,OAAOA,EAAEC,SAP3B,4C,sBAWO,IAAMC,EAAW,WAAsB,IAArBX,EAAoB,uDAAP,GAapC,OAAOC,EAAWD,ICyJLY,MA1Kf,WAAgB,IAAD,EACWC,mBAAS,QADpB,mBACNH,EADM,KACAI,EADA,OAEaD,mBAAS,IAFtB,mBAENE,EAFM,KAECC,EAFD,OAGqBH,oBAAS,GAH9B,mBAGNI,EAHM,KAGKC,EAHL,OAISL,mBAAS,IAJlB,mBAINzB,EAJM,KAIDC,EAJC,OAK2BwB,mBAAS,CAACb,IALrC,mBAKNmB,EALM,KAKQC,EALR,OAMmBP,mBAC9B,wEAPW,mBAMN/B,EANM,KAMIuC,EANJ,OAS6BR,mBAAS,MATtC,mBASNS,EATM,KASSC,EATT,KAiBbC,qBAAU,WACR,sBAAC,4BAAAtB,EAAA,sEACqBS,EAASQ,GAD9B,OACOJ,EADP,OAECC,EAASD,GAFV,0CAAD,KAIC,CAACI,IAEJK,qBAAU,WACR,IAAMC,EJzCuB,SAACrC,GAChC,OAAQ,GAAKA,EAAO,IAAO,EIwCRsC,CAAkBtC,GAE7BuC,EAAcC,aAAY,WAC1BX,GACFY,MAEDJ,GAEH,OAAO,kBAAMK,cAAcH,OAG7BH,qBAAU,WACJF,IACFL,EAAYK,EAAcS,YAAcT,EAAcU,gBAEvD,CAACf,EAAWK,IAEf,IAIMO,EAAU,uCAAG,gCAAA3B,EAAA,uEACuBa,GAAjCkB,EADU,KACKC,EADL,WAGjBpB,EAAQmB,GAHS,KAIjBjB,IACEkB,EAAehD,OAAS,GALT,qBAKagD,EALb,uCAKoCvB,EAASQ,GAL7C,gGAAH,qDASVxB,EAAU,SAACwC,GACXhB,EAAaiB,SAASD,GACxBf,EAAgBD,EAAakB,QAAO,SAACC,GAAD,OAAUA,IAASH,MAEvDf,EAAgB,GAAD,mBAAKD,GAAL,CAAmBgB,MAmBtC,OACE,yBAAK7C,UAAU,OACb,kBAACiD,EAAA,EAAD,KACE,gCACE,0CACA,oDACA,0DAEF,8BACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACF,EAAA,EAAD,CAAKlD,UAAU,SACb,kBAACmD,EAAA,EAAD,CAAKC,GAAG,MACN,yBAAKpD,UAAU,WACb,uBAAGA,UAAU,QAAQoB,OAM7B,kBAAC+B,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACN,4BACEpD,UAAU,2BACVC,QA7DI,WACpB2B,GAAcD,KA8DGA,EAAY,OAAS,UAG1B,kBAACwB,EAAA,EAAD,CAAKC,GAAG,MACN,yBAAKpD,UAAU,gBACb,wBAAIA,UAAU,QAAd,2BACA,2BACEO,KAAK,OACLP,UAAU,OACVS,SAnDK,SAAC4C,GACxBtB,EAAYsB,EAAMC,OAAO9C,OACzBoB,GAAa,MAmDG,kBAAC,IAAD,CACE2B,QAAShE,EAAWC,GACpBgE,KAlDP,CACXC,WAAY,CACVC,SAAU,IAiDMC,QA7CC,SAACN,GACpBpB,EAAiBoB,EAAMC,aAgDX,kBAACH,EAAA,EAAD,CAAKC,GAAG,MACN,yBAAKpD,UAAU,eACb,2CACA,yBAAKA,UAAU,0BACb,kBAACH,EAAD,CAAOC,IAAKA,EAAKC,OAAQA,IACzB,yBAAKC,UAAU,cACb,0CACA,4BACE,kBAACG,EAAD,CACEC,KAAK,SACLC,QAAS,kBAAMA,EAAQK,IACvBJ,QAASuB,EAAaiB,SAASpC,KAEjC,kBAACP,EAAD,CACEC,KAAK,OACLC,QAAS,kBAAMA,EAAQK,IACvBJ,QAASuB,EAAaiB,SAASpC,KAEjC,kBAACP,EAAD,CACEC,KAAK,SACLC,QAAS,kBAAMA,EAAQK,IACvBJ,QAASuB,EAAaiB,SAASpC,KAEjC,kBAACP,EAAD,CACEC,KAAK,MACLC,QAAS,kBAAMA,EAAQK,IACvBJ,QAASuB,EAAaiB,SAASpC,KAEjC,kBAACP,EAAD,CACEC,KAAK,QACLC,QAAS,kBAAMA,EAAQK,IACvBJ,QAASuB,EAAaiB,SAASpC,iBC9JvCkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStE,MACvB,2DCXNuE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlF,QAAQkF,MAAMA,EAAMC,c","file":"static/js/main.8c2babe7.chunk.js","sourcesContent":["export const calculateInterval = (bpm) => {\r\n  return (60 / bpm) * 1000 * 8;\r\n};\r\n\r\nexport const getVideoId = (videoUrl) => {\r\n  const regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\r\n  const match = videoUrl.match(regExp);\r\n  console.log(\"match: \" + match);\r\n  const videoShortCode = match && match[7].length === 11 ? match[7] : false;\r\n  return videoShortCode;\r\n};\r\n","import React from 'react'\r\n\r\n\r\nexport default function Speed({bpm, setBpm}) {\r\n\r\n    const decreaseBpm = (e) => {\r\n        return setBpm(bpm - 1) \r\n    }\r\n\r\n    const increaseBpm = (e) => {\r\n        return setBpm(bpm + 1)\r\n    }\r\n\r\n    return (\r\n        <div className=\"speed\">\r\n            <p className=\"speed--container-title\">Speed - {bpm / 16} Words Per Minute</p>\r\n            <div className=\"speed--container\">\r\n                \r\n                <button className=\"speedButton\" onClick={decreaseBpm}>-</button>\r\n                <p>{bpm} bpm</p>\r\n                <button className=\"speedButton\" onClick={increaseBpm}>+</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Category({name, onCheck, checked}) {\r\n    return (\r\n        <li><label><input type=\"checkbox\" value={name} onChange={onCheck} checked={checked}/>{name}</label></li>\r\n    )\r\n}","// list categories\r\nexport const categories = {\r\n  SPORT: \"sport\",\r\n  LOVE: \"love\",\r\n  MARKET: \"market\",\r\n  ART: \"art\",\r\n  MUSIC: \"music\",\r\n};\r\n\r\nasync function getApiData(categories) {\r\n  const response = await fetch(\r\n    `https://api.datamuse.com/words?ml=${categories.join(\"+\")}`\r\n  );\r\n\r\n  const data = await response.json();\r\n\r\n  return data.map((x) => x.word);\r\n}\r\n\r\n// get words from available categories\r\nexport const getWords = (categories = []) => {\r\n  // if(categories.includes('sports') && categories.includes('love')) {\r\n  //   return ['Hello', 'Nepal','love', 'sex' ]\r\n  // }\r\n\r\n  // if(categories.includes('sports')) {\r\n  //   return ['football', 'screamer']\r\n  // }\r\n\r\n  // if(categories.includes('love')) {\r\n  //   return ['love', 'sex']\r\n  // }\r\n\r\n  return getApiData(categories);\r\n\r\n  // return [\"football\", \"screamer\", \"love\", \"sex\", \"harley\"];\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport YouTube from \"react-youtube\";\n\nimport \"./assets/reset.css\";\nimport \"./assets/style.css\";\n\nimport { calculateInterval, getVideoId } from \"./utils\";\n\nimport Speed from \"./components/Speed\";\nimport Category from \"./components/Category\";\nimport { getWords, categories } from \"./data\";\n\n// add renderedStuff here\n// How to write good Doc Block\n\nfunction App() {\n  const [word, setWord] = useState(\"word\");\n  const [words, setWords] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [bpm, setBpm] = useState(90);\n  const [checkedItems, setCheckedItems] = useState([categories.SPORT]);\n  const [videoUrl, setVideoUrl] = useState(\n    \"https://www.youtube.com/watch?v=lHzYZvpbpoo&ab_channel=NEXTSOULBEATS\"\n  );\n  const [videoPlayerEl, setVideoPlayerEl] = useState(null);\n\n  // things that need to be more specific:\n  // no repeaters\n  // no repeaters - plurals\n  // data randomised\n  // first word needs to be randomised too\n\n  useEffect(() => {\n    (async () => {\n      const words = await getWords(checkedItems);\n      setWords(words);\n    })();\n  }, [checkedItems]);\n\n  useEffect(() => {\n    const interval = calculateInterval(bpm);\n\n    const intervalRef = setInterval(() => {\n      if (isRunning) {\n        updateWord();\n      }\n    }, interval);\n\n    return () => clearInterval(intervalRef);\n  });\n\n  useEffect(() => {\n    if (videoPlayerEl) {\n      isRunning ? videoPlayerEl.playVideo() : videoPlayerEl.pauseVideo();\n    }\n  }, [isRunning, videoPlayerEl]);\n\n  const toggleRunning = () => {\n    setIsRunning(!isRunning);\n  };\n\n  const updateWord = async () => {\n    const [pickedWord, ...remainingWords] = words;\n\n    setWord(pickedWord);\n    setWords(\n      remainingWords.length > 0 ? remainingWords : await getWords(checkedItems)\n    );\n  };\n\n  const onCheck = (category) => {\n    if (checkedItems.includes(category)) {\n      setCheckedItems(checkedItems.filter((item) => item !== category));\n    } else {\n      setCheckedItems([...checkedItems, category]);\n    }\n  };\n\n  const onInputBoxChange = (event) => {\n    setVideoUrl(event.target.value);\n    setIsRunning(false);\n  };\n\n  const opts = {\n    playerVars: {\n      autoplay: 0,\n    },\n  };\n\n  const onVideoReady = (event) => {\n    setVideoPlayerEl(event.target);\n  };\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <header>\n          <h1>Harry Mack</h1>\n          <p>Random Word Generator</p>\n          <p>Practice freestyling here.</p>\n        </header>\n        <main>\n          <Row>\n            <Col sm=\"8\">\n              <Row className=\"h-100\">\n                <Col sm=\"12\">\n                  <div className=\"wordBox\">\n                    <p className=\"word\">{word}</p>\n                  </div>\n                </Col>\n              </Row>\n            </Col>\n\n            <Col sm=\"4\">\n              <Row>\n                <Col sm=\"12\">\n                  <button\n                    className=\"startButton mt-5 mt-sm-0\"\n                    onClick={toggleRunning}\n                  >\n                    {isRunning ? \"Stop\" : \"Start\"}\n                  </button>\n                </Col>\n                <Col sm=\"12\">\n                  <div className=\"youtubeEmbed\">\n                    <h3 className=\"mb-2\">Input youtube video URL</h3>\n                    <input\n                      type=\"text\"\n                      className=\"mb-2\"\n                      onChange={onInputBoxChange}\n                    />\n                    <YouTube\n                      videoId={getVideoId(videoUrl)}\n                      opts={opts}\n                      onReady={onVideoReady}\n                    />\n                  </div>\n                </Col>\n                <Col sm=\"12\">\n                  <div className=\"preferences\">\n                    <h3>Preferences</h3>\n                    <div className=\"preferences--container\">\n                      <Speed bpm={bpm} setBpm={setBpm} />\n                      <div className=\"categories\">\n                        <h3>Categories</h3>\n                        <ul>\n                          <Category\n                            name=\"Sports\"\n                            onCheck={() => onCheck(categories.SPORT)}\n                            checked={checkedItems.includes(categories.SPORT)}\n                          />\n                          <Category\n                            name=\"Love\"\n                            onCheck={() => onCheck(categories.LOVE)}\n                            checked={checkedItems.includes(categories.LOVE)}\n                          />\n                          <Category\n                            name=\"Market\"\n                            onCheck={() => onCheck(categories.MARKET)}\n                            checked={checkedItems.includes(categories.MARKET)}\n                          />\n                          <Category\n                            name=\"Art\"\n                            onCheck={() => onCheck(categories.ART)}\n                            checked={checkedItems.includes(categories.ART)}\n                          />\n                          <Category\n                            name=\"Music\"\n                            onCheck={() => onCheck(categories.MUSIC)}\n                            checked={checkedItems.includes(categories.MUSIC)}\n                          />\n                        </ul>\n                      </div>\n                    </div>\n                  </div>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </main>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}